{"version":3,"sources":["nfc.svg","spinner.gif","contexts/context.js","components/Scanner/Scanner.js","containers/Scan.js","components/SVGs/save.js","components/Writer/Writer.js","containers/Write.js","App.js","reportWebVitals.js","index.js"],"names":["ActionsContext","createContext","scan","write","setActions","Scanner","useContext","actions","className","onClick","src","Spinner","alt","Scan","useState","message","setMessage","serialNumber","setSerialNumber","useCallback","a","window","ndef","NDEFReader","console","log","onreadingerror","onreading","event","onReading","records","record","recordType","textDecoder","TextDecoder","encoding","decode","data","useEffect","status","Save","xmlns","height","viewBox","width","fill","d","Writer","writeFn","React","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","Write","onWrite","alert","App","actionsValue","onHandleAction","nfc","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAAe,MAA0B,gC,sCCA1B,G,MAAA,IAA0B,qCCE5BA,EAAiBC,wBAC1B,CACIC,KAAM,KACNC,MAAO,KACPC,WAAW,e,OCcJC,EAfC,WAAO,IAAD,EACWC,qBAAWN,GAAlCO,EADY,EACZA,QAASH,EADG,EACHA,WACf,OACE,sBAAKI,UAAU,UAAf,UACE,mBAAGA,UAAU,eAAeC,QAAS,kBAAIL,EAAW,2BAAIG,GAAL,IAAcL,KAAM,SAAvE,eACA,sBAAKM,UAAU,oBAAf,UACE,qBAAKE,IAAKC,EAASC,IAAI,eAAeJ,UAAU,kBAChD,mBAAGA,UAAU,eAAb,gCCyDKK,EAjEF,WAAO,IAAD,EACeC,mBAAS,IADxB,mBACRC,EADQ,KACCC,EADD,OAEyBF,mBAAS,IAFlC,mBAERG,EAFQ,KAEMC,EAFN,OAGgBZ,qBAAWN,GAAlCO,EAHO,EAGPA,QAASH,EAHF,EAGEA,WAEXF,EAAOiB,sBAAW,sBAAC,4BAAAC,EAAA,2DAEjB,eAAgBC,QAFC,iCAIPC,EAAO,IAAID,OAAOE,WAJX,SAKPD,EAAKpB,OALE,OAObsB,QAAQC,IAAI,8BACZH,EAAKI,eAAiB,WAClBF,QAAQC,IAAI,wDAGhBH,EAAKK,UAAY,SAAAC,GACbJ,QAAQC,IAAI,sBACZI,EAAUD,GACVxB,EAAW,CACPF,KAAM,UACNC,MAAO,QAjBF,kDAsBbqB,QAAQC,IAAR,kDAtBa,kEAyBvB,CAACrB,IAEGyB,EAAY,SAAC,GAA6B,IAA5Bd,EAA2B,EAA3BA,QAASE,EAAkB,EAAlBA,aACzBC,EAAgBD,GAD2B,oBAEtBF,EAAQe,SAFc,IAE3C,2BAAsC,CAAC,IAA5BC,EAA2B,QAClC,OAAQA,EAAOC,YACX,IAAK,OACD,IAAMC,EAAc,IAAIC,YAAYH,EAAOI,UAC3CnB,EAAWiB,EAAYG,OAAOL,EAAOM,SANN,gCAqB/C,OAJAC,qBAAU,WACNpC,MACD,CAACA,IAGA,mCACsB,YAAjBK,EAAQL,KACT,gCACI,gDAAmBe,KACnB,0CAAaF,QAEf,cAAC,EAAD,CAASwB,OAAQhC,EAAQL,UCxDxBsC,G,MANF,kBACT,sBAAKC,MAAM,6BAA6BC,OAAO,OAAOC,QAAQ,YAAYC,MAAM,OAAOC,KAAK,UAA5F,UACI,sBAAMC,EAAE,kBAAkBD,KAAK,SAAQ,sBAAMC,EAAE,8KCwBxCC,EAxBA,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAAa,EACIC,IAAMnC,SAAS,IADnB,mBACnBC,EADmB,KACVC,EADU,KAS1B,OACE,mCACE,sBAAMkC,SARK,SAACC,GACZA,EAAEC,iBACFJ,EAAQjC,GACRC,EAAW,KAKX,SACI,sBAAKR,UAAU,mBAAf,UACI,uBAAO6C,KAAK,OAAOC,YAAY,mBAAmBC,MAAOxC,EAASyC,SAAU,SAACL,GAAD,OAAKnC,EAAWmC,EAAEM,OAAOF,UACrG,yBAAQ/C,UAAU,MAAM6C,KAAK,SAA7B,UACI,cAAC,EAAD,IADJ,kBCGDK,EAlBD,WACV,IAAMC,EAAO,uCAAG,WAAM5C,GAAN,eAAAK,EAAA,sEAEFE,EAAO,IAAID,OAAOE,WAFhB,SAIFD,EAAKpB,OAJH,uBAKFoB,EAAKnB,MAAM,CAAC2B,QAAS,CAAC,CAAEE,WAAY,OAAQK,KAAMtB,MALhD,OAMR6C,MAAM,gBANE,gDAQRpC,QAAQC,IAAR,MARQ,yDAAH,sDAYb,OACE,cAAC,EAAD,CAAQuB,QAASW,KCiBRE,MA3Bf,WAAgB,IAAD,EAEiB/C,mBAAS,MAF1B,mBAENP,EAFM,KAEGH,EAFH,OAGSG,GAAW,GAA1BL,EAHM,EAGNA,KAAMC,EAHA,EAGAA,MAEP2D,EAAe,CAACvD,UAAQH,cAExB2D,EAAiB,SAACxD,GACtBH,EAAW,eAAIG,KAGjB,OACI,sBAAKC,UAAU,MAAf,UACE,qBAAKE,IAAKsD,EAAKxD,UAAU,WAAWI,IAAI,SACxC,0CACA,sBAAKJ,UAAU,gBAAf,UACE,wBAAQC,QAAS,kBAAIsD,EAAe,CAAC7D,KAAM,WAAYC,MAAO,QAAQK,UAAU,MAAhF,kBACA,wBAAQC,QAAS,kBAAIsD,EAAe,CAAC7D,KAAM,KAAMC,MAAO,aAAaK,UAAU,MAA/E,sBAEF,eAACR,EAAeiE,SAAhB,CAAyBV,MAAOO,EAAhC,UACG5D,GAAQ,cAAC,EAAD,IACRC,GAAS,cAAC,EAAD,WChBL+D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.73deb808.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/nfc.1e1c9c72.svg\";","export default __webpack_public_path__ + \"static/media/spinner.e8697d57.gif\";","import { createContext } from \"react\";\r\n\r\nexport const ActionsContext = createContext(\r\n    {\r\n        scan: null,\r\n        write: null,\r\n        setActions:()=>{}\r\n    }\r\n);","import React, { useContext } from 'react';\r\nimport './Scanner.css'\r\nimport Spinner from '../../spinner.gif';\r\nimport { ActionsContext } from '../../contexts/context';\r\n\r\nconst Scanner = () => {\r\n  const { actions, setActions} = useContext(ActionsContext);\r\n    return (\r\n      <div className=\"scanner\">\r\n        <p className=\"scanner-exit\" onClick={()=>setActions({...actions, scan: null})}>X</p>\r\n        <div className=\"scanner-container\">\r\n          <img src={Spinner} alt=\"spinning log\" className=\"scanner-image\"/>\r\n          <p className=\"scanner-text\">\r\n            Scanning...\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default Scanner;","import React, { useCallback, useContext, useEffect, useState } from 'react';\r\nimport Scanner from '../components/Scanner/Scanner';\r\nimport { ActionsContext } from '../contexts/context';\r\n\r\nconst Scan = () => {\r\n    const [message, setMessage] = useState('');\r\n    const [serialNumber, setSerialNumber] = useState('');\r\n    const { actions, setActions} = useContext(ActionsContext);\r\n\r\n    const scan = useCallback(async() => {\r\n\r\n        if ('NDEFReader' in window) { \r\n            try {\r\n                const ndef = new window.NDEFReader();\r\n                await ndef.scan();\r\n                \r\n                console.log(\"Scan started successfully.\");\r\n                ndef.onreadingerror = () => {\r\n                    console.log(\"Cannot read data from the NFC tag. Try another one?\");\r\n                };\r\n                \r\n                ndef.onreading = event => {\r\n                    console.log(\"NDEF message read.\");\r\n                    onReading(event);\r\n                    setActions({\r\n                        scan: 'scanned',\r\n                        write: null\r\n                    });\r\n                };\r\n\r\n            } catch(error){\r\n                console.log(`Error! Scan failed to start: ${error}.`);\r\n            };\r\n        }\r\n    },[setActions]);\r\n\r\n    const onReading = ({message, serialNumber}) => {\r\n        setSerialNumber(serialNumber);\r\n        for (const record of message.records) {\r\n            switch (record.recordType) {\r\n                case \"text\":\r\n                    const textDecoder = new TextDecoder(record.encoding);\r\n                    setMessage(textDecoder.decode(record.data));\r\n                    break;\r\n                case \"url\":\r\n                    // TODO: Read URL record with record data.\r\n                    break;\r\n                default:\r\n                    // TODO: Handle other records with record data.\r\n                }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        scan();\r\n    }, [scan]);\r\n\r\n    return(\r\n        <>\r\n            {actions.scan === 'scanned' ?  \r\n            <div>\r\n                <p>Serial Number: {serialNumber}</p>\r\n                <p>Message: {message}</p>\r\n            </div>\r\n            : <Scanner status={actions.scan}></Scanner> }\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Scan;","import React from 'react';\r\n\r\nconst Save = () =>(\r\n    <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 0 24 24\" width=\"24px\" fill=\"#FFFFFF\">\r\n        <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/><path d=\"M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm2 16H5V5h11.17L19 7.83V19zm-7-7c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3zM6 6h9v4H6z\"/>\r\n    </svg>\r\n);\r\n\r\nexport default Save;","import React from 'react';\r\nimport './Writer.css';\r\nimport Save from '../SVGs/save';\r\n\r\nconst Writer = ({writeFn}) => {\r\n    const [message, setMessage] = React.useState('');\r\n\r\n    const onSave = (e) => {\r\n        e.preventDefault();\r\n        writeFn(message);\r\n        setMessage('');\r\n    };\r\n\r\n    return (\r\n      <>\r\n        <form onSubmit={onSave}>\r\n            <div className=\"writer-container\">\r\n                <input type=\"text\" placeholder=\"Enter Message...\" value={message} onChange={(e)=>setMessage(e.target.value)}></input>\r\n                <button className=\"btn\" type=\"submit\">\r\n                    <Save/>\r\n                    Save\r\n                </button>\r\n            </div>\r\n        </form>\r\n      </>\r\n    );\r\n};\r\n\r\nexport default Writer;","import React from 'react';\r\nimport Writer from '../components/Writer/Writer';\r\n\r\nconst Write = () => {\r\n    const onWrite = async(message) => {\r\n        try {\r\n            const ndef = new window.NDEFReader();\r\n            // This line will avoid showing the native NFC UI reader\r\n            await ndef.scan();\r\n            await ndef.write({records: [{ recordType: \"text\", data: message }]});\r\n            alert(`Value Saved!`);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    return (\r\n      <Writer writeFn={onWrite}/>\r\n    );\r\n};\r\n\r\nexport default Write;","import nfc from './nfc.svg';\r\nimport './App.css';\r\nimport Scan from './containers/Scan';\r\nimport Write from './containers/Write';\r\nimport { useState } from 'react';\r\nimport { ActionsContext } from './contexts/context';\r\n\r\nfunction App() {\r\n\r\n  const [actions, setActions] = useState(null);\r\n  const {scan, write} = actions || {};\r\n\r\n  const actionsValue = {actions,setActions};\r\n\r\n  const onHandleAction = (actions) =>{\r\n    setActions({...actions});\r\n  }\r\n\r\n  return (\r\n      <div className=\"App\">\r\n        <img src={nfc} className=\"App-logo\" alt=\"logo\" />\r\n        <h1>NFC Tool</h1>\r\n        <div className=\"App-container\">\r\n          <button onClick={()=>onHandleAction({scan: 'scanning', write: null})} className=\"btn\">Scan</button>\r\n          <button onClick={()=>onHandleAction({scan: null, write: 'writing'})} className=\"btn\">Write</button>\r\n        </div>\r\n        <ActionsContext.Provider value={actionsValue}>\r\n          {scan && <Scan/>}\r\n          {write && <Write/>}\r\n        </ActionsContext.Provider>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}